---
name: Soft-Braille-Keyboard Classic Build (Modernized, Robust)
on:
  workflow_dispatch: null
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout SBK
        uses: actions/checkout@v4
      - name: Clone BrailleBack
        run: >
          git clone --depth 1 https://github.com/google/brailleback.git || \
            (echo "Fallback: Downloading BrailleBack mirror..." && \
             git clone --depth 1 https://gitlab.com/mirror/google/brailleback.git brailleback)
          test -d brailleback || mv brailleback* brailleback
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: |
            build-tools;34.0.0
            platform-tools
            platforms;android-34
            ndk;26.2.11394342 # For native 64-bit builds
      - name: Set up Ant
        run: sudo apt-get update && sudo apt-get install -y ant
      - name: Update project.properties and libraries
        run: >
          set -e

          # Detect Android target (fallback to API 33 if 34 fails)

          sdk_target="android-34"

          if ! ${ANDROID_HOME}/tools/bin/avdmanager list targets | grep -q "android-34"; then
            sdk_target="android-33"
            echo "Fallback: Using android-33"
          fi

          target_id=$(${ANDROID_HOME}/tools/bin/android list targets | grep -B 1 "$sdk_target" | head -n1 | grep -oP '\d+' | head -n1)

          # If android tool not available, fallback to manual property edit

          if [ -n "$target_id" ]; then
            android update project -p . --target $target_id --library ../brailleback/braille/service/ --library ../brailleback/braille/client/ || true
          else
            echo "Fallback: Manually editing project.properties"
            echo "target=$sdk_target" > project.properties
            echo "android.library.reference.1=../brailleback/braille/service/" >> project.properties
            echo "android.library.reference.2=../brailleback/braille/client/" >> project.properties
          fi
      - name: Prepare and patch BrailleBack tables
        run: >
          set -e

          # Download latest liblouis table

          mkdir -p brailleback/braille/service/jni/liblouiswrapper/liblouis/tables/

          curl -fLo brailleback/braille/service/jni/liblouiswrapper/liblouis/tables/pl-pl-comp8.ctb \
               https://raw.githubusercontent.com/liblouis/liblouis/master/tables/pl-pl-comp8.ctb || echo "Fallback: Skipping extra table"
          # Copy SBK tables

          cp patches/*.utb brailleback/braille/service/jni/liblouiswrapper/liblouis/tables/ || true

          cp patches/*.ctb brailleback/braille/service/jni/liblouiswrapper/liblouis/tables/ || true

          # Patch BrailleBack tables

          (cd brailleback/braille/service/jni/liblouiswrapper/liblouis && patch -p0 < ../../../../../../patches/tablechanges.patch) || echo "Fallback: Tablechanges patch failed"

          (cd brailleback && patch -p0 < ../patches/tablelist-brailleback.patch) || echo "Fallback: Tablelist patch failed"

          patch -p1 < patches/TranslatorClient.patch || echo "Fallback: TranslatorClient patch failed"

          # Rebuild translation tables, fallback to continue if fails

          cd brailleback/braille/service && ./tables/mktranslationtables || echo "Fallback: mktranslationtables failed"
      - name: Build SBK with Ant (Debug)
        run: >
          set -e

          ant debug || (echo "Fallback: Ant build failed, trying clean then build again..." && ant clean && ant debug)
      - name: (Fallback) Build SBK with Ant (Release) if Debug artifact missing
        if: failure()
        run: >
          ant release || (echo "Both debug and release builds failed!" && exit 1)
      - name: Find built APK
        id: find_apk
        run: >
          APK_PATH=$(find . -type f -name "*.apk" | grep -E "debug|release" | head
          -n1)

          if [ -z "$APK_PATH" ]; then
            echo "No APK found!" >&2
            exit 1
          fi

          echo "apk=$APK_PATH" >> $GITHUB_OUTPUT
      - name: Check for arm64-v8a support
        run: >
          APK="${{ steps.find_apk.outputs.apk }}"

          unzip -l "$APK" | grep "arm64-v8a" || echo "Warning: APK may not contain 64-bit native libraries!"
      - name: Decode keystore if available
        id: decode_keystore
        run: |
          if [ -n "${{ secrets.RELEASE_KEYSTORE_B64 }}" ]; then
            echo "${{ secrets.RELEASE_KEYSTORE_B64 }}" | base64 -d > release.jks
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi
      - name: Sign APK (if keystore available)
        if: steps.decode_keystore.outputs.found == 'true'
        run: |
          APK="${{ steps.find_apk.outputs.apk }}"
          cp "$APK" unsigned.apk
          apksigner sign \
            --ks release.jks \
            --ks-key-alias "${{ secrets.RELEASE_KEY_ALIAS }}" \
            --ks-pass pass:"${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" \
            --key-pass pass:"${{ secrets.RELEASE_KEY_PASSWORD }}" \
            --out sbk-signed.apk \
            unsigned.apk
          rm -f unsigned.apk
      - name: Upload APK artifact (signed if available, else unsigned)
        uses: actions/upload-artifact@v4
        with:
          name: sbk-apk
          path: |
            sbk-signed.apk
            ${{ steps.find_apk.outputs.apk }}
          if-no-files-found: warn
