---
name: Build & Sign KISS Launcher APK
on:
  workflow_dispatch: null
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4
      - name: Clone KISS Launcher source
        run: |
          git clone --depth 1 https://github.com/Neamar/KISS.git
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
      - name: Decode keystore into app dir
        run: >
          echo "${{ secrets.RELEASE_KEYSTORE_B64 }}" | base64 -d > KISS/app/nube.jks
      - name: Create release signing properties in app dir
        run: >
          echo "storeFile=nube.jks" > KISS/app/release-signing.properties

          echo "storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> KISS/app/release-signing.properties

          echo "keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}" >> KISS/app/release-signing.properties

          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> KISS/app/release-signing.properties
      - name: Ensure Gradle Wrapper is executable
        run: chmod +x ./KISS/gradlew
      - name: Conditionally inject signingConfigs if needed
        run: >
          set -e

          cd KISS/app

          HAS_SIGNING=$(grep -c 'signingConfigs' build.gradle || true)

          HAS_RELEASE_CFG=$(grep -c 'signingConfig signingConfigs.release' build.gradle || true)


          if [ "$HAS_SIGNING" -eq 0 ]; then
            echo "No signingConfigs found, injecting..."

            # Detect if defaultConfig exists; inject after defaultConfig, else after android {
            if grep -q 'defaultConfig[[:space:]]*{' build.gradle; then
              awk '
                /defaultConfig[[:space:]]*{/ && !x {
                  print
                  print "    def keystorePropertiesFile = file(\"release-signing.properties\")"
                  print "    def keystoreProperties = new Properties()"
                  print "    if (keystorePropertiesFile.exists()) {"
                  print "        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))"
                  print "    }"
                  print "    signingConfigs {"
                  print "        release {"
                  print "            storeFile file(keystoreProperties[\"storeFile\"])"
                  print "            storePassword keystoreProperties[\"storePassword\"]"
                  print "            keyAlias keystoreProperties[\"keyAlias\"]"
                  print "            keyPassword keystoreProperties[\"keyPassword\"]"
                  print "        }"
                  print "    }"
                  x=1
                  next
                }
                { print }
              ' build.gradle > build.gradle.tmp && mv build.gradle.tmp build.gradle
            elif grep -q 'android[[:space:]]*{' build.gradle; then
              # fallback: inject after opening of android { if no defaultConfig found
              awk '
                /android[[:space:]]*{/ && !x {
                  print
                  print "    def keystorePropertiesFile = file(\"release-signing.properties\")"
                  print "    def keystoreProperties = new Properties()"
                  print "    if (keystorePropertiesFile.exists()) {"
                  print "        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))"
                  print "    }"
                  print "    signingConfigs {"
                  print "        release {"
                  print "            storeFile file(keystoreProperties[\"storeFile\"])"
                  print "            storePassword keystoreProperties[\"storePassword\"]"
                  print "            keyAlias keystoreProperties[\"keyAlias\"]"
                  print "            keyPassword keystoreProperties[\"keyPassword\"]"
                  print "        }"
                  print "    }"
                  x=1
                  next
                }
                { print }
              ' build.gradle > build.gradle.tmp && mv build.gradle.tmp build.gradle
            else
              echo "No android block found in build.gradle, cannot inject signingConfig." >&2
              exit 1
            fi
          else
            echo "signingConfigs block already present, skipping injection."
          fi


          if [ "$HAS_RELEASE_CFG" -eq 0 ]; then
            echo "Injecting 'signingConfig signingConfigs.release' into release buildType..."
            sed -i '/release[[:space:]]*{/a\            signingConfig signingConfigs.release' build.gradle
          else
            echo "release buildType already uses signingConfig, skipping."
          fi


          # Extra: Ensure the injected code only exists once (no duplicates)

          if [ $(grep -c 'signingConfigs' build.gradle) -gt 1 ]; then
            echo "Warning: Multiple signingConfigs blocks detected. Please check build.gradle."
          fi
      - name: Build release APK (with stacktrace)
        run: cd Kname: List APKs
        run: find KISS/app -type f -name "*.apk"
      - name: Collect APKs
        run: |
          mkdir -p apk-out
          find KISS/app -type f -name "*.apk" -exec cp {} apk-out/ \;
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name:ISS && ./gradlew assembleRelease --stacktrace
      -  kiss-release-apk
          path: apk-out/*.apk
          if-no-files-found: warn
