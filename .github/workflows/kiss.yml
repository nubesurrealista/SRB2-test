name: Build & Sign KISS Launcher APK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Clone KISS Launcher source
        run: |
          git clone --depth 1 https://github.com/Neamar/KISS.git

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Decode keystore into app dir
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE_B64 }}" | base64 -d > KISS/app/nube.jks

      - name: Create release signing properties in app dir
        run: |
          echo "storeFile=nube.jks" > KISS/app/release-signing.properties
          echo "storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> KISS/app/release-signing.properties
          echo "keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}" >> KISS/app/release-signing.properties
          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> KISS/app/release-signing.properties

      - name: Ensure Gradle Wrapper is executable
        run: chmod +x ./KISS/gradlew

      - name: Conditionally inject signingConfigs if needed
        run: |
          cd KISS/app
          HAS_SIGNING=$(grep -c 'signingConfigs' build.gradle || true)
          HAS_RELEASE_CFG=$(grep -c 'signingConfig signingConfigs.release' build.gradle || true)
          if [ "$HAS_SIGNING" -eq 0 ]; then
            echo "Injecting signingConfigs into build.gradle"
            # Inserta justo después de la línea 'defaultConfig {'
            awk '
              /defaultConfig[[:space:]]*{/ && !x {
                print
                print "    def keystorePropertiesFile = file(\\\"release-signing.properties\\\")"
                print "    def keystoreProperties = new Properties()"
                print "    if (keystorePropertiesFile.exists()) {"
                print "        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))"
                print "    }"
                print "    signingConfigs {"
                print "        release {"
                print "            storeFile file(keystoreProperties[\\\"storeFile\\\"])"
                print "            storePassword keystoreProperties[\\\"storePassword\\\"]"
                print "            keyAlias keystoreProperties[\\\"keyAlias\\\"]"
                print "            keyPassword keystoreProperties[\\\"keyPassword\\\"]"
                print "        }"
                print "    }"
                x=1
                next
              }
              { print }
            ' build.gradle > build.gradle.tmp && mv build.gradle.tmp build.gradle
          else
            echo "signingConfigs present, skipping injection."
          fi

          if [ "$HAS_RELEASE_CFG" -eq 0 ]; then
            echo "Injecting 'signingConfig signingConfigs.release' into release buildType"
            sed -i '/release[[:space:]]*{/a\            signingConfig signingConfigs.release' build.gradle
          else
            echo "release buildType already uses signingConfig, skipping."
          fi

      - name: Build release APK (with stacktrace)
        run: cd KISS && ./gradlew assembleRelease --stacktrace

      - name: List APKs
        run: find KISS/app -type f -name "*.apk"

      - name: Collect APKs
        run: |
          mkdir -p apk-out
          find KISS/app -type f -name "*.apk" -exec cp {} apk-out/ \;

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: kiss-release-apk
          path: apk-out/*.apk
          if-no-files-found: warn
