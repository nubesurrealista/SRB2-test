---
name: Build & Sign KISS Launcher APK
on:
  workflow_dispatch: null
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4
      - name: Clone KISS Launcher source
        run: |
          git clone --depth 1 https://github.com/Neamar/KISS.git
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
      - name: Decode keystore into app dir
        run: >
          echo "${{ secrets.RELEASE_KEYSTORE_B64 }}" | base64 -d > KISS/app/nube.jks
      - name: Create release signing properties in app dir
        run: >
          echo "storeFile=nube.jks" > KISS/app/release-signing.properties

          echo "storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> KISS/app/release-signing.properties

          echo "keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}" >> KISS/app/release-signing.properties

          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> KISS/app/release-signing.properties
      - name: Ensure Gradle Wrapper is executable
        run: chmod +x ./KISS/gradlew
      - name: Conditionally inject signingConfigs if needed
        run: >
          cd KISS/app

          if ! grep -q 'signingConfigs' build.gradle || ! grep -q 'signingConfig signingConfigs.release' build.gradle; then
            echo "Injecting signingConfigs into build.gradle"
            awk '
              /buildTypes[[:space:]]*{/,/}/ {
                if ($0 ~ /release[[:space:]]*{/) {
                  print $0
                  print "            signingConfig signingConfigs.release"
                  next
                }
              }
              { print }
              END {
                print ""
                print "android {"
                print "    def keystorePropertiesFile = file(\"release-signing.properties\")"
                print "    def keystoreProperties = new Properties()"
                print "    if (keystorePropertiesFile.exists()) {"
                print "        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))"
                print "    }"
                print "    signingConfigs {"
                print "        release {"
                print "            storeFile file(keystoreProperties[\"storeFile\"])"
                print "            storePassword keystoreProperties[\"storePassword\"]"
                print "            keyAlias keystoreProperties[\"keyAlias\"]"
                print "            keyPassword keystoreProperties[\"keyPassword\"]"
                print "        }"
                print "    }"
                print "}"
              }
            ' build.gradle > build.gradle.tmp && mv build.gradle.tmp build.gradle
          else
            echo "signingConfigs for release already present, not injecting."
          fi
      - name: Build release APK
        run: cd KISS && ./gradlew assembleRelease
      - name: List APKs
        run: find KISS/app -type f -name "*.apk"
      - name: Collect APKs
        run: |
          mkdir -p apk-out
          find KISS/app -type f -name "*.apk" -exec cp {} apk-out/ \;
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: kiss-release-apk
          path: apk-out/*.apk
          if-no-files-found: warn
