---
name: LogFox Release APK (Signed, macOS)
on:
  workflow_dispatch: null
env:
  KEY_STORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
  ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
  KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
jobs:
  build:
    name: Build APK
    runs-on: macos-latest
    steps:
      - name: Checkout LogFox code
        uses: actions/checkout@v4
        with:
          repository: F0x1d/LogFox
          path: LogFox
      - name: Decode keystore into app dir
        run: >
          echo "${{ secrets.RELEASE_KEYSTORE_B64 }}" | base64 -d >
          LogFox/app/nube.jks
      - name: Create release signing properties in app dir
        run: |
          cat <<EOF > LogFox/app/release-signing.properties
          storeFile=nube.jks
          storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}
          keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}
          EOF
      - name: Ensure Gradle Wrapper is executable
        run: chmod +x ./LogFox/gradlew
      - name: Inject signing config if missing (non-null assertion)
        run: >
          FILE="LogFox/app/build.gradle.kts"

          grep -q 'import java.util.Properties' "$FILE" || sed -i '' '1i\

          import java.util.Properties

          ' "$FILE"

          grep -q 'import java.io.FileInputStream' "$FILE" || sed -i '' '1i\

          import java.io.FileInputStream

          ' "$FILE"

          if ! grep -q "signingConfigs" "$FILE"; then
            awk '
              /android[[:space:]]*{/ {
                print $0
                print ""
                print "    val keystorePropertiesFile = file(\"release-signing.properties\")"
                print "    val keystoreProperties = Properties()"
                print "    if (keystorePropertiesFile.exists()) {"
                print "        keystoreProperties.load(FileInputStream(keystorePropertiesFile))"
                print "    }"
                print "    signingConfigs {"
                print "        create(\"release\") {"
                print "            storeFile = file(keystoreProperties[\"storeFile\"]?.toString()!!)"
                print "            storePassword = keystoreProperties[\"storePassword\"]?.toString()!!"
                print "            keyAlias = keystoreProperties[\"keyAlias\"]?.toString()!!"
                print "            keyPassword = keystoreProperties[\"keyPassword\"]?.toString()!!"
                print "        }"
                print "    }"
                next
              }
              { print }
            ' "$FILE" > tmp && mv tmp "$FILE"
          fi

          if ! grep -q "signingConfig(signingConfigs.getByName(\"release\"))" "$FILE"; then
            awk '
              /buildTypes[[:space:]]*{/,/}/ {
                if ($0 ~ /release[[:space:]]*{/) {
                  print $0
                  print "            signingConfig(signingConfigs.getByName(\"release\"))"
                  next
                }
              }
              { print }
            ' "$FILE" > tmp && mv tmp "$FILE"
          fi
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: oracle
          cache: gradle
      - name: Build APK
        run: |
          cd LogFox
          ./gradlew assembleRelease --stacktrace --no-daemon
      - name: Listar APKs generados
        run: find LogFox -type f -name "*.apk"
      - name: Subir cualquier APK generado
        uses: actions/upload-artifact@v4
        with:
          name: logfox-apks
          path: |
            LogFox/**/*.apk
