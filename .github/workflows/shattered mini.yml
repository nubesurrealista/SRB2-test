name: Build Ultra-Resilient Minimal JRE for Shattered Pixel Dungeon

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Descargar info de última release (.jar)
        id: get-jar
        run: |
          set -e
          LOG=workflow.log
          echo "Obteniendo información de la última release..." | tee -a $LOG
          LATEST=$(curl -s https://api.github.com/repos/00-Evan/shattered-pixel-dungeon/releases/latest)
          JAR_URL=$(echo "$LATEST" | grep browser_download_url | grep '.jar"' | cut -d '"' -f4)
          if [ -z "$JAR_URL" ]; then
            echo "No se encontró ningún .jar en la última release." | tee -a $LOG
            exit 1
          fi
          echo "JAR_URL=$JAR_URL" | tee -a $LOG
          echo "jar_url=$JAR_URL" >> $GITHUB_OUTPUT

      - name: Descargar .jar
        id: download-jar
        run: |
          set -e
          LOG=workflow.log
          JAR_URL="${{ steps.get-jar.outputs.jar_url }}"
          for i in {1..3}; do
            wget -O shattered.jar "$JAR_URL" && break || {
              echo "Intento $i de descarga fallido. Reintentando..." | tee -a $LOG
              sleep 2
            }
          done
          if [ ! -f shattered.jar ]; then
            echo "No se pudo descargar el .jar tras 3 intentos." | tee -a $LOG
            exit 1
          fi
          file shattered.jar | tee -a $LOG
          if ! file shattered.jar | grep -Eq "Zip archive data|Java archive data"; then
            echo "El archivo descargado no parece ser un .jar válido." | tee -a $LOG
            exit 1
          fi

      - name: Instalar OpenJDK 21 (y fallback a 17 si es necesario)
        id: setup-java
        run: |
          set -e
          LOG=workflow.log
          plan_b=0
          echo "Intentando instalar OpenJDK 21..." | tee -a $LOG
          if ! sudo apt-get update && sudo apt-get install openjdk-21-jdk -y; then
            echo "Fallo al instalar Java 21. Probando con Java 17..." | tee -a $LOG
            plan_b=1
            sudo apt-get install openjdk-17-jdk -y
          fi
          java -version | tee -a $LOG
          echo "plan_b=$plan_b" >> $GITHUB_OUTPUT

      - name: Determinar módulos requeridos (con fallback)
        id: jdeps
        run: |
          set -e
          LOG=workflow.log
          JAR=shattered.jar
          modules=""
          echo "Ejecutando jdeps para descubrir módulos..." | tee -a $LOG
          if modules=$(jdeps --multi-release 21 --print-module-deps "$JAR" 2>>$LOG); then
            echo "Módulos detectados: $modules" | tee -a $LOG
            echo "modules=$modules" >> $GITHUB_OUTPUT
            echo "jarfile=$JAR" >> $GITHUB_OUTPUT
          else
            echo "jdeps falló. Usando fallback manual..." | tee -a $LOG
            # Fallback: módulos típicos para aplicaciones Java con UI y LWJGL
            modules="java.base,java.desktop,jdk.unsupported"
            echo "modules=$modules" >> $GITHUB_OUTPUT
            echo "jarfile=$JAR" >> $GITHUB_OUTPUT
            echo "fallback_modules=true" >> $GITHUB_OUTPUT

      - name: Generar JRE custom ultra-minimalista
        id: jlink
        run: |
          set -e
          LOG=workflow.log
          # Siempre añade jdk.unsupported (evita duplicados si el fallback ya lo incluye)
          modules="$(echo "${{ steps.jdeps.outputs.modules }},jdk.unsupported" | sed 's/,,/,/g' | sed 's/\(.*\),jdk.unsupported/\1,jdk.unsupported/' | sed 's/,/ /g' | tr ' ' '\n' | awk '!x[$0]++' | paste -sd, -)"
          plan_b=${{ steps.setup-java.outputs.plan_b }}
          if [ "$plan_b" = "1" ]; then
            JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
          else
            JAVA_HOME="/usr/lib/jvm/java-21-openjdk-amd64"
          fi
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "JAVA_HOME: $JAVA_HOME" | tee -a $LOG
          echo "Módulos utilizados en jlink: $modules" | tee -a $LOG
          if ! jlink --output custom-jre --add-modules "$modules" --strip-debug --no-man-pages --no-header-files --compress=2; then
            echo "jlink falló. Intentando con módulos mínimos conocidos..." | tee -a $LOG
            jlink --output custom-jre --add-modules java.base,java.desktop,jdk.unsupported --strip-debug --no-man-pages --no-header-files --compress=2
          fi
          if [ ! -f custom-jre/bin/java ]; then
            echo "El JRE custom no se generó correctamente." | tee -a $LOG
            exit 1
          fi
          echo "custom-jre generado exitosamente." | tee -a $LOG

      - name: Crear script de lanzamiento run.sh (seguro)
        run: |
          cat <<'EOF' > run.sh
          #!/bin/bash
          DIR="$(cd "$(dirname "$0")" && pwd)"
          JAVA_BIN="$DIR/custom-jre/bin/java"
          JAR_FILE="$(ls $DIR/*.jar | head -n1)"
          if [ ! -x "$JAVA_BIN" ]; then
            echo "No se encontró el binario de Java en $JAVA_BIN"
            exit 1
          fi
          if [ ! -f "$JAR_FILE" ]; then
            echo "No se encontró ningún .jar en el directorio"
            exit 1
          fi
          exec "$JAVA_BIN" -jar "$JAR_FILE"
          EOF
          chmod +x run.sh

      - name: Empaquetar artefactos
        run: |
          tar czvf shattered-minimal.tar.gz shattered.jar custom-jre run.sh workflow.log

      - name: Subir artefacto final
        uses: actions/upload-artifact@v4
        with:
          name: shattered-minimal
          path: shattered-minimal.tar.gz
